# Generated by Django 4.1.5 on 2023-01-31 08:22

from django.db import migrations, models
import django.db.models.deletion
import requests
import re
import base64
import os

"""SonarQube versions """
SQ_VERSIONS=[
'9.8.0.63668',

'9.7.1.62043',

'9.7.0.61563',

'8.9.10.61524',

'9.6.1.59531',

'9.6.0.59041',

'8.9.9.56886',

'9.5.0.56709',

'9.4.0.54424',

'8.9.8.54436',

'8.9.7.52159',

'9.3.0.51899',

'9.2.4.50792',

'8.9.6.50800',

'8.9.5.50698',

'9.2.3.50713',

'9.2.2.50622',

'8.9.4.50575',

'9.2.1.49989',

'9.2.0.49834',

'8.9.3.48735',

'9.1.0.47736',

'9.0.1.46107',

'8.9.2.46101',

'9.0.0.45539',

'8.9.1.44547',

'8.9.0.43852',

'8.8.0.42792',    
    ]

LANGUAGES = {
    "sonar-abap" : "ABAP",
    "sonar-css" : "CSS",
    "sonar-text" : "Text",
    "sonar-json" : "JSON",
    "sonar-xml" : "XML",
    "sonar-python" : "Python",
    "sonar-apex" : "Apex",
    "sonar-html" : "HTML",
    "sonar-tsql" : "TSQL",
    "sonar-vb"  : "VB",
    "sonar-iac" : "IaC",
    "sonar-scala" : "Scala",
    "sonar-go" : "Go",
    "sonar-php" : "PHP",
    "sonar-javascript" : "Javascript",
    "sonar-java" : "Java",
    "sonar-flex" : "Flex",
    "sonar-vbnet" : "VbNet",
    "sonar-csharp" : "C#",
    "sonar-swift" : "Swift",
    "sonar-rpg" : "RPG",
    "sonar-pli" : "PL1",
    "sonar-cfamily" : "C",
    "sonar-cobol" : "COBOL"
    
    
}

def get_gradle_config(sqversion):
    '''Provides the raw text content of the build.gradle file 
    of the SonarQube version set as parameter'''
    
    token = os.getenv('SQMATRIX_TOKEN')
    owner = 'SonarSource'
    repo = 'sonar-enterprise'
    path = 'build.gradle?ref={}'.format(sqversion)

    r = requests.get(
    'https://api.github.com/repos/{owner}/{repo}/contents/{path}'.format(
    owner=owner, repo=repo, path=path),
    headers={
        'Accept': 'application/vnd.github+json',
        'Authorization': 'Bearer {}'.format(token),
        'X-GitHub-Api-Version': '2022-11-28'
            }
    )
    data = r.json()
    file_content = data.get('content', '')
    file_content_encoding = data.get('encoding')
    if file_content_encoding == 'base64':
        file_content = base64.b64decode(file_content).decode()
    
    return file_content

def jar_list(filecontent):
    ''' Returns the list of Sonarsource jar files 
    in the given gradle file'''
    
    result = []
    lines =  filecontent.split('\n')
    
    regexp = '^.*dependency\s+\'(com|org)\.sonar.*?\:(.*[0-9]+)\'$'
    
    
    for line in lines:
        res = re.search(regexp, line)
        if res:
            if len(res.groups()) == 2:
                result.append(res.group(2).split(':'))
    return result  




def add_sonarqube_versions(apps, schema_editor):
    SonarQube = apps.get_model('main', 'Sonarqube')
    Plugin = apps.get_model('main', 'Plugin')
    Compatibility = apps.get_model('main', 'Compatibility')

    for version in SQ_VERSIONS:
        sq = SonarQube(full_version=version)
        sq.save()
        
        file_content = get_gradle_config(version)
        jars = jar_list(file_content)
        for jar in jars:
            
            plugin_name = jar[0]
            plugin_version = jar[1]
            
            if plugin_name.endswith("plugin"):
                plugin_name = plugin_name[:-7] 
            else:
                continue
            
            l = LANGUAGES.get(plugin_name, "Unknown language")
            
            Plugin.objects.get_or_create(name=plugin_name, language=l)   
                
            comp = Compatibility(
                sonarqube=sq, 
                plugin=Plugin.objects.filter(name=plugin_name).first(), 
                version=plugin_version)
            comp.save()         
        
def remove_sonarqube_versions(apps, schema_editor):
    for version in SQ_VERSIONS:
        sq = Sonarqube.objects.get(full_version=version)
        sq.delete()
    

class Migration(migrations.Migration):
    initial = True
    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Plugin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("language", models.CharField(default=None, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="SonarQube",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("full_version", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Compatibility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.CharField(max_length=30)),
                (
                    "plugin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.plugin"
                    ),
                ),
                (
                    "sonarqube",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.sonarqube"
                    ),
                ),
            ],
        ),
        migrations.RunPython(add_sonarqube_versions, remove_sonarqube_versions),
    ]
